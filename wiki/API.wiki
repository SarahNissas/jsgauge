#summary API Documentation

= Introduction =

This page describes the API for the pure JavaScript `Gauge` component.


= Methods =

  * [API#Gauge(_canvas,_options_) Gauge]
  * [API#setValue_(_value_) setValue]
  * [API#draw_() draw]

<hr />

== Gauge( canvas, options ) ==

Gauge constructor, call this using `new` to create an instance of the gauge:

{{{
new Gauge( document.getElementById( 'test_default' ) );
}}}

To create a gauge, you need a reference to a `canvas` tag that you would like to use for the gauge, for example: 

{{{
<canvas id="test_default" width="250" height="250"></canvas>
}}}

*Arguments*:

  * canvas - Reference to a DOM object containing the `<canvas>` tag to use for the gauge.
  * options - Object of optional parameters; see [API#Options options] section below for details.

<hr />

== setValue ( value ) ==

Changes the value displayed on a gauge.

*Arguments*:

  * value - Numeric value to display.

<hr />

== draw () ==

Redraws the gauge.

<hr />

= Options =

  * [API#value value]
  * [API#valueFormat valueFormat]
  * [API#label label]
  * [API#unitsLabel unitsLabel]
  * [API#min min]
  * [API#max max]
  * [API#majorTicks majorTicks]
  * [API#minorTicks minorTicks]
  * [API#bands bands]
  * [API#colorOfText colorOfText]
  * [API#warningText colorOfWarningText]
  * [API#colorOfFill colorOfFill]
  * [API#colorOfPointerFill colorOfPointerFill]
  * [API#colorOfPointerStroke colorOfPointerStroke]
  * [API#colorOfCenterCircleFill colorOfCenterCircleFill]
  * [API#colorOfCenterCircleStroke colorOfCenterCircleStroke]
  * ~~[API#greenFrom greenFrom]~~
  * ~~[API#greenTo greenTo]~~
  * ~~[API#yellowFrom yellowFrom]~~
  * ~~[API#yellowTo yellowTo]~~
  * ~~[API#redFrom redFrom]~~
  * ~~[API#redTo redTo]~~
  * ~~[API#redColor redColor]~~
  * ~~[API#yellowColor yellowColor]~~
  * ~~[API#greenColor greenColor]~~


<hr />

== value ==

Value to display on the gauge using both the text label at the bottom of the gauge and the needle.

*Type*: `Number`

*Default*: `0`

<hr />

== valueFormat ==

A function that accepts two parameters (value, decimals) and returns a string value to be displayed for that specific value.

*Type*: `Function`

<hr />

== label == 

Text label to display at the top of the gauge.

*Type*: `String`

*Default*: `''`

<hr />

== unitsLabel ==

Text to display after the gauge value to indicate the type of units. For example, when displaying a temperature value you might include a degree symbol:

{{{
unitsLabel: '' + String.fromCharCode(186)
}}}

*Type*: `String`

*Default*: `''`

<hr />

== min ==

Minimum value to display on the gauge; indicated by a small text label on the left-hand side of the gauge.

*Type*: `Number`

*Default*: `0`

<hr />

== max ==

Maximum value to display on the gauge; indicated by a small text label on the right-hand side of the gauge.

*Type*: `Number`

*Default*: `100`

<hr />

== majorTicks ==

Number of "large" ticks around the inner rim of the gauge.

*Type*: `Number`

*Default*: `5`

<hr />

== minorTicks ==

Number of small ticks between each pair of major ticks.

*Type*: `Number`

*Default*: `2`

<hr />

== bands ==

Array of objects used to define colored bands along the inner rim of the gauge. Each object contains the following members:

  * color - Color of the band
  * from - Value that the band starts at
  * to - Value that the band ends at

For example:

{{{
bands: [
   { color: '#ccc', from: 0, to: 10 },
   { color: '#ddd', from: 10, to: 20 }
]
}}}

*Type*: `Array`

*Default*: `[]`

<hr />

== colorOfText ==

Color of text displayed on the gauge.

*Type*: `String`

*Default*: `'rgb(0, 0, 0)'`

<hr />

== colorOfWarningText ==

Color to use for warning situations, for example when displaying a value outside the min/max range.

*Type*: `String`

*Default*: `'rgb(255, 0, 0)'`

<hr /> 

== colorOfFill ==

Fill colors used to draw the gauge.

*Type*: `Array`

*Default*: `[ '#111', '#ccc', '#ddd', '#eee' ]`

<hr />

== colorOfPointerFill ==

Color to use to fill the needle.

*Type*: `String`

*Default*: `'rgba(255, 100, 0, 0.7)'`

<hr />

== colorOfPointerStroke ==

Color to use for the outline of the needle.

*Type*: `String`

*Default*: `'rgba(255, 100, 100, 0.9)'`

<hr />

== colorOfCenterCircleFill ==

Fill color for the needle's center circle.

*Type*: `String`

*Default*: `'rgba(0, 100, 255, 1)'`

<hr />

== colorOfCenterCircleStroke ==

Color to use for the outline of the needle's center circle.

*Type*: `String`

*Default*: `'rgba(0, 0, 255, 1)'`

<hr />

== greenFrom ==

*Deprecated* Use the `bands` option to define the range of colored bands.

*Type*: `Number`

*Default*: `0`

<hr />

== greenTo ==

*Deprecated* Use the `bands` option to define the range of colored bands.

*Type*: `Number`

*Default*: `0`

<hr />

== yellowFrom ==

*Deprecated* Use the `bands` option to define the range of colored bands.

*Type*: `Number`

*Default*: `0`

<hr />

== yellowTo ==

*Deprecated* Use the `bands` option to define the range of colored bands.

*Type*: `Number`

*Default*: `0`

<hr />

== redFrom ==

*Deprecated* Use the `bands` option to define the range of colored bands.

*Type*: `Number`

*Default*: `0`

<hr />

== redTo ==

*Deprecated* Use the `bands` option to define the range of colored bands.

*Type*: `Number`

*Default*: `0`

<hr />

== redColor ==

*Deprecated* Use the `bands` option to define band colors.

*Type*: `String`

*Default*: `'rgba(255, 0, 0, 0.2)'`

<hr />

== yellowColor ==

*Deprecated* Use the `bands` option to define band colors.

*Type*: `String`

*Default*: `'rgba(255, 215, 0, 0.2)'`

<hr />

== greenColor ==

*Deprecated* Use the `bands` option to define band colors.

*Type*: `String`

*Default*: `'rgba(0, 255, 0, 0.2)'`